{"version":3,"sources":["components/weather.component.jsx","components/Search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","min","max","city","icon","temp","minTemp","maxTemp","desc","className","Search","handleSubmit","onSubmit","e","type","name","autoComplete","api","App","props","getWeather","a","preventDefault","target","elements","value","fetch","apiCall","json","response","console","log","setState","calCelcius","main","temp_min","temp_max","weather","description","getWeatherIcon","id","state","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21bccc0e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Weather = ({ city, icon, temp, minTemp, maxTemp, desc }) => {\n    const minMaxTemp = (min, max) => (\n        <h3>\n            <span className=\"px-4\">{min}&deg;</span>\n            <span className=\"px-4\">{max}&deg;</span>\n        </h3>\n    )\n    return (\n        <div className=\"container\">\n            <div className=\"cards\">\n                <h1>{city}</h1>\n                <h5 className=\"py-4\">\n                    <i className={`wi ${icon} display-1`}></i>\n                </h5>\n                <h1 className=\"py-2\">{temp}&deg;</h1>\n                {minMaxTemp(minTemp, maxTemp)}\n\n                <h4 className=\"py-4\">{desc}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Weather\n","import React from 'react'\n\nconst Search = ({ handleSubmit }) => {\n    return (\n        <div className=\"container mt-5 mb-5\">\n            <form onSubmit={(e) => handleSubmit(e)}>\n                <div className=\"row\">\n                    <div className=\"col-md-4 offset-md-3\">\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" />\n                    </div>\n                    <div className=\"col-md-4 mt-md-0 text-md-left\">\n                        <button className=\"btn btn-warning\">Get Weather</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Search\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css'\nimport Weather from './components/weather.component'\nimport Search from './components/Search.component'\n\nconst api = {\n  key: 'aa14885d32f060433dd547a718e132b0',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      city: '',\n      temp: '',\n      minTemp: '',\n      maxTemp: '',\n      desc: '',\n      icon: ''\n    }\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  componentDidMount() {\n    // this.getWeather()\n  }\n\n  calCelcius(temp) {\n    return Math.floor(temp - 273.15)\n  }\n\n  getWeatherIcon(rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm })\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle })\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain })\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow })\n        break;\n      case rangeId >= 700 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere })\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear })\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds })\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds })\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value;\n\n    const apiCall = await fetch(`${api.base}weather?q=${city}&appid=${api.key}`)\n    const response = await apiCall.json()\n    console.log(response)\n    this.setState({\n      city: response.name,\n      temp: this.calCelcius(response.main.temp),\n      minTemp: this.calCelcius(response.main.temp_min),\n      maxTemp: this.calCelcius(response.main.temp_max),\n      desc: response.weather[0].description\n    })\n    this.getWeatherIcon(response.weather[0].id)\n  }\n\n\n  render() {\n    const { city, icon, temp, minTemp, maxTemp, desc } = this.state;\n    return (\n      <div className=\"App\">\n        <Search handleSubmit={this.getWeather} />\n        <Weather city={city} icon={icon} temp={temp} minTemp={minTemp} maxTemp={maxTemp} desc={desc} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}